{"version":3,"sources":["state.ts","assets/images/rif-credential-viewer.svg","assets/images/powered-by-iov.svg","components/UserInput.tsx","components/ErrorComponent.tsx","components/RawJwtDisplay.tsx","operations.ts","components/LoadingComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["appStatus","initialState","status","START","message","jwt","undefined","credential","UserInput","handleDecode","useState","jwtInput","setJwtInput","sharedProps","disabled","LOADING","value","onChange","evt","target","className","onClick","ErrorComponent","ERROR","DecodeDisplay","json","setJson","useEffect","decoded","decodeJWT","JSON","stringify","resolver","Resolver","getResolver","networks","name","rpcUrl","registry","LoadingComponent","style","textAlign","App","appState","setAppState","src","rifCredentialViewerLogo","alt","console","log","verifyCredential","handleVerifiableCredential","then","catch","err","poweredByRif","version","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39a385af.chunk.js","sourcesContent":["import { JwtCredentialPayload } from 'did-jwt-vc'\n\n/* eslint-disable no-unused-vars */\nexport enum appStatus {\n  START = 'START',\n  LOADING = 'LOADING',\n  ERROR = 'ERROR',\n  DECODED = 'DECODED'\n}\n\nexport interface appStateInterface {\n  status: appStatus\n  message: string\n  jwt?: string\n  credential?: JwtCredentialPayload,\n}\n\nexport const initialState = {\n  status: appStatus.START,\n  message: '',\n  jwt: undefined,\n  credential: undefined\n}\n","export default __webpack_public_path__ + \"static/media/rif-credential-viewer.5cd41cae.svg\";","export default __webpack_public_path__ + \"static/media/powered-by-iov.5db81567.svg\";","import React, { useState } from 'react'\nimport { appStatus } from '../state'\n\ninterface UserInputInterface {\n  status: appStatus\n  handleDecode: (jwt: string) => any // @todo type\n}\n\nconst UserInput: React.FC<UserInputInterface> = ({\n  status, handleDecode\n}) => {\n  const [jwtInput, setJwtInput] = useState<string>('')\n  const sharedProps = { disabled: status === appStatus.LOADING }\n\n  return (\n    <div>\n      <textarea\n        {...sharedProps}\n        value={jwtInput}\n        onChange={(evt) => setJwtInput(evt.target.value)}\n        className=\"userInput\"\n      />\n      <button\n        {...sharedProps}\n        onClick={() => handleDecode(jwtInput)}\n        className=\"submit\"\n      >Decode Presentation</button>\n    </div>\n  )\n}\n\nexport default UserInput\n","import React from 'react'\nimport { appStatus } from '../state'\n\ninterface ErrorComponentInterface {\n  status: appStatus\n  message: string\n}\n\nconst ErrorComponent: React.FC<ErrorComponentInterface> = ({ status, message }) => {\n  if (status !== appStatus.ERROR) {\n    return <></>\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"column\">\n        <p className=\"alert\">{message}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default ErrorComponent\n","import React, { useState, useEffect } from 'react'\nimport { decodeJWT } from 'did-jwt'\n\ninterface DecodeDisplayInterface {\n  jwt?: string\n}\n\nconst DecodeDisplay: React.FC<DecodeDisplayInterface> = ({ jwt }) => {\n  if (!jwt) {\n    return <></>\n  }\n\n  const [json, setJson] = useState<string | null>(null)\n\n  useEffect(() => {\n    const decoded = decodeJWT(jwt)\n    setJson(JSON.stringify(decoded, null, 2))\n  }, [jwt])\n\n  return (\n    <div>\n      <h3>Raw Decoded</h3>\n      <pre className=\"textarea json\">{json}</pre>\n    </div>\n  )\n}\n\nexport default DecodeDisplay\n","import { Resolver } from 'did-resolver'\nimport { getResolver } from 'ethr-did-resolver'\nimport { verifyPresentation, verifyCredential } from 'did-jwt-vc'\n// import { verifyJWT } from 'jesse-did-jwt'\n\nconst providerConfig = {\n  networks: [\n    { name: 'rsk:testnet', rpcUrl: 'https://did.testnet.rsk.co:4444', registry: '0xdca7ef03e98e0dc2b855be647c39abe984fcf21b' },\n    { name: 'rsk', rpcUrl: 'https://did.rsk.co:4444', registry: '0xdca7ef03e98e0dc2b855be647c39abe984fcf21b' },\n    { name: 'mainnet', rpcUrl: 'https://mainnet.infura.io/v3/8c2e55bc61b94ad781c4deae786c4f58', registry: '0xdca7ef03e98e0dc2b855be647c39abe984fcf21b' }\n  ]\n}\nconst resolver = new Resolver(getResolver(providerConfig))\n\nexport const handleVerifiablePresentation = (jwt: string) => {\n  console.log('presentation check...')\n  return verifyPresentation(jwt, resolver)\n}\n\nexport const handleVerifiableCredential = (jwt: string) => {\n  console.log('credential check...')\n  console.log(resolver)\n  return verifyCredential(jwt, resolver)\n}\n\n/*\nexport const handleVerifiableJwt = (jwt: string) => {\n  // return Promise.resolve('hello')\n  console.log('trying...', jwt)\n  // const localResolver = new Resolver()\n  // localResolver.resolve('https://did.testnet.rsk.co:4444')\n  return verifyJWT(jwt, { ethSign: true, resolver: resolver })\n    .then((verifiedResponse: any) => console.log('success!', verifiedResponse))\n    .catch((error: Error) => console.log('Error', error.message))\n}\n*/\n","import React from 'react'\nimport { appStatus } from '../state'\n\ninterface LoadingComponentInterface {\n  status: appStatus\n}\n\nconst LoadingComponent: React.FC<LoadingComponentInterface> = ({ status }) =>\n  status === appStatus.LOADING\n    ? <div style={{ textAlign: 'center' }}>LOADING</div>\n    : <></>\n\nexport default LoadingComponent\n","import React, { useState } from 'react'\nimport rifCredentialViewerLogo from './assets/images/rif-credential-viewer.svg'\nimport poweredByRif from './assets/images/powered-by-iov.svg'\nimport './assets/scss/_index.scss'\nimport { version } from '../package.json'\nimport { appStatus, appStateInterface, initialState } from './state'\nimport UserInput from './components/UserInput'\nimport ErrorComponent from './components/ErrorComponent'\nimport DecodeDisplay from './components/RawJwtDisplay'\nimport { handleVerifiableCredential } from './operations'\nimport LoadingComponent from './components/LoadingComponent'\n\nfunction App () {\n  const [appState, setAppState] = useState<appStateInterface>(initialState)\n\n  const decode = (jwt: string) => {\n    setAppState({ ...initialState, status: appStatus.LOADING })\n\n    const catchError = (err: Error) => {\n      console.log('error!', err)\n      setAppState({ ...initialState, message: err.message, status: appStatus.ERROR })\n    }\n\n    handleVerifiableCredential(jwt)\n      .then((credential: any) => {\n        console.log(credential)\n        // setAppState({ ...appState, jwt, credential, status: appStatus.DECODED })\n      })\n      .catch(catchError)\n\n    // return null // verifyJwtThing(jwt)\n    /*\n    type === 'cred'\n      ? handleVerifiableCredential(jwt)\n        .then((credential: any) => {\n          console.log(credential)\n          setAppState({ ...appState, jwt, credential, status: appStatus.DECODED })\n        })\n        .catch(catchError)\n      : handleVerifiablePresentation(jwt)\n        .then((presentation: any) =>\n        // setAppState({ ...appState, status: appStatus.DECODED }))\n          console.log('@todo', presentation))\n        .catch(catchError)\n        */\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container header\">\n        <div className=\"column\">\n          <img src={rifCredentialViewerLogo} alt=\"RIF Credential Viewer\" />\n        </div>\n      </div>\n\n      <ErrorComponent status={appState.status} message={appState.message} />\n      <LoadingComponent status={appState.status} />\n\n      <div className=\"container content\">\n        <div className=\"column column-6\">\n          <h2>Raw JWT</h2>\n          <UserInput status={appState.status} handleDecode={decode} />\n        </div>\n        <div className=\"column column-6\">\n          <h2>Decoded</h2>\n          <DecodeDisplay jwt={appState.jwt} />\n        </div>\n      </div>\n\n      <div className=\"container footer\">\n        <div className=\"column\">\n          <img src={poweredByRif} alt=\"Powered By RIF\" />\n          <p>Copyright &copy; 2021 IOV Labs. All rights reserved.</p>\n          <p>Version {version}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}