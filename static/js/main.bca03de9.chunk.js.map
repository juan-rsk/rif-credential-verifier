{"version":3,"sources":["state.ts","assets/images/rif-credential-viewer.svg","assets/images/powered-by-iov.svg","components/UserInput.tsx","components/ErrorComponent.tsx","operations.ts","components/LoadingComponent.tsx","constants.ts","components/MetaDataHelpers.tsx","components/CredentialDisplay.tsx","components/PresentationDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["appStatus","initialState","status","START","message","jwt","undefined","credential","UserInput","disabled","handleDecode","initialText","useState","jwtInput","setJwtInput","useEthSign","setUseEthSign","sharedProps","value","onChange","evt","target","className","type","checked","onClick","trim","replace","ErrorComponent","resolver","Resolver","getResolver","networks","name","rpcUrl","registry","verifyVerifiableJwt","ethSign","verifyJWT","LoadingComponent","style","textAlign","INVALID_SIGNATURE","FormatDateTimeItem","label","validation","valueDate","Date","valueString","toLocaleString","FormatMetaData","FormatDates","payload","iat","vp","exp","vc","nbf","CredentialDisplay","setEthSign","error","setError","decodedCredential","setDecodedCredential","verify","then","response","catch","err","useEffect","data","credentialSubject","join","iss","sub","Object","keys","map","key","PresentationDisplay","presentation","issuer","verifiableCredential","App","appState","setAppState","decode","LOADING","DECODED","errorMessage","ERROR","initialJwt","window","location","search","startsWith","src","rifCredentialViewerLogo","alt","poweredByRif","version","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bca03de9.chunk.js","sourcesContent":["import { JWTVerified } from 'jesse-did-jwt'\n\n/* eslint-disable no-unused-vars */\nexport enum appStatus {\n  START = 'START',\n  LOADING = 'LOADING',\n  ERROR = 'ERROR',\n  DECODED = 'DECODED'\n}\n\nexport interface appStateInterface {\n  status: appStatus\n  message: string\n  jwt?: string\n  credential?: JWTVerified,\n}\n\nexport const initialState = {\n  status: appStatus.START,\n  message: '',\n  jwt: undefined,\n  credential: undefined\n}\n","export default __webpack_public_path__ + \"static/media/rif-credential-viewer.5cd41cae.svg\";","export default __webpack_public_path__ + \"static/media/powered-by-iov.5db81567.svg\";","import React, { useState } from 'react'\n\ninterface UserInputInterface {\n  disabled: boolean\n  handleDecode: (jwt: string, useEthSign: boolean) => void\n  initialText?: string\n}\n\nconst UserInput: React.FC<UserInputInterface> = ({\n  disabled, handleDecode, initialText\n}) => {\n  const [jwtInput, setJwtInput] = useState<string>(initialText || '')\n  const [useEthSign, setUseEthSign] = useState<boolean>(true)\n\n  const sharedProps = { disabled }\n\n  return (\n    <div>\n      <textarea\n        {...sharedProps}\n        value={jwtInput}\n        onChange={(evt) => setJwtInput(evt.target.value)}\n        className=\"userInput\"\n      />\n      <p><label>\n        <input {...sharedProps} type=\"checkbox\" checked={useEthSign} className=\"ethSignCheck\" onChange={(evt) => setUseEthSign(evt.target.checked)} />\n        Use ethSign\n      </label></p>\n      <button\n        {...sharedProps}\n        onClick={() => handleDecode(jwtInput.trim().replace(/\\n/g, ' '), useEthSign)}\n        className=\"submit\"\n      >Decode JWT</button>\n    </div>\n  )\n}\n\nexport default UserInput\n","import React from 'react'\n\ninterface ErrorComponentInterface {\n  message: string\n}\n\nconst ErrorComponent: React.FC<ErrorComponentInterface> = ({ message }) => (\n  <p className=\"alert\">{message}</p>\n)\n\nexport default ErrorComponent\n","import { Resolver } from 'did-resolver'\nimport { getResolver } from 'ethr-did-resolver'\nimport { verifyJWT, decodeJWT } from 'jesse-did-jwt'\n\nconst providerConfig = {\n  networks: [\n    { name: 'rsk:testnet', rpcUrl: 'https://did.testnet.rsk.co:4444', registry: '0xdca7ef03e98e0dc2b855be647c39abe984fcf21b' },\n    { name: 'rsk', rpcUrl: 'https://did.rsk.co:4444', registry: '0xdca7ef03e98e0dc2b855be647c39abe984fcf21b' },\n    { name: 'mainnet', rpcUrl: 'https://mainnet.infura.io/v3/8c2e55bc61b94ad781c4deae786c4f58', registry: '0xdca7ef03e98e0dc2b855be647c39abe984fcf21b' }\n  ]\n}\n\nconst resolver = new Resolver(getResolver(providerConfig))\n\nexport const verifyVerifiableJwt = (jwt: string, ethSign: boolean) => {\n  // @ts-expect-error: resolver is incorrect type from did-jwt\n  return verifyJWT(jwt, { ethSign, resolver })\n}\n\nexport const decode = (jwt: string) => {\n  return decodeJWT(jwt)\n}\n","import React from 'react'\n\nconst LoadingComponent: React.FC = () =>\n  <div className=\"panel\" style={{ textAlign: 'center' }}><div className=\"loader\"> </div></div>\n\nexport default LoadingComponent\n","export const INVALID_SIGNATURE = 'Signature invalid for JWT'\n","import { JWTPayload } from 'jesse-did-jwt'\nimport React from 'react'\n\ninterface FormatDateTimeI {\n  label: string;\n  value?: number | null,\n  validation?: 'PAST' | 'FUTURE'\n}\n/**\n * Single MetaDataRow with formatting for datetime strings\n * @param label string label to display\n * @param value number datetime represented in seconds since 1970\n * @param validation? PAST | FUTURE Check if the date should be before or after now()\n */\nexport const FormatDateTimeItem:React.FC<FormatDateTimeI> = ({ label, value, validation }) => {\n  if (!value) { return <></> }\n\n  const valueDate = new Date(value * 1000)\n  const valueString = valueDate.toLocaleString()\n\n  let className = 'datetime'\n  if ((validation === 'PAST' && valueDate < new Date()) || (validation === 'FUTURE' && valueDate > new Date())) {\n    className += ' alert'\n  }\n\n  return <FormatMetaData className={className} label={label} value={valueString} />\n}\n\n/**\n * Single MetaDataRow\n * @param label string label to display\n * @param value string value to display\n * @param className string, optional className for the row\n */\nexport const FormatMetaData:React.FC<{ label: string; value?: string; className?: string }> = ({ label, value, className }) =>\n  value ? (\n    <div className={className ? `container ${className}` : 'container'}>\n      <div className=\"column-3 label\"><p>{label}</p></div>\n      <div className=\"column-9 value\"><p>{value}</p></div>\n    </div>\n  ) : <></>\n\n/**\n * Format multiple dates\n * @param payload payload from a JWTCredential or Presentation\n */\nexport const FormatDates:React.FC<{ payload: JWTPayload }> = ({ payload }) => (\n  <>\n    <FormatDateTimeItem label=\"Issued At\" value={payload?.iat || null} />\n    <FormatDateTimeItem label=\"Expires\" value={payload.vp?.exp || payload.vc?.exp || null} validation=\"PAST\" />\n    <FormatDateTimeItem label=\"Not Valid Before\" value={payload?.nbf || null} validation=\"FUTURE\" />\n  </>\n)\n","import { JWTVerified } from 'jesse-did-jwt'\nimport React, { useState, useEffect } from 'react'\nimport { INVALID_SIGNATURE } from '../constants'\nimport ErrorComponent from './ErrorComponent'\nimport LoadingComponent from './LoadingComponent'\nimport { FormatDates, FormatMetaData } from './MetaDataHelpers'\n\ninterface CredentialDisplayInterface {\n  jwt?: string\n  credential?: JWTVerified\n  verifyVerifiableJwt: (jwt: string, ethSign: boolean) => any\n}\n\nconst CredentialDisplay: React.FC<CredentialDisplayInterface> = ({ jwt, credential, verifyVerifiableJwt }) => {\n  const [ethSign, setEthSign] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [decodedCredential, setDecodedCredential] = useState<JWTVerified | null>(null)\n\n  const verify = (useEthSign: boolean) => {\n    setError(null)\n    setEthSign(useEthSign)\n    verifyVerifiableJwt && jwt && verifyVerifiableJwt(jwt, useEthSign)\n      .then((response: JWTVerified) => setDecodedCredential(response))\n      .catch((err: Error) => setError(err.message))\n  }\n\n  useEffect(() => {\n    !credential ? verify(ethSign) : setDecodedCredential(credential)\n  }, [jwt])\n\n  if (error) {\n    return (\n      <div className=\"panel error\">\n        <h3>VerifiableCredential</h3>\n        <ErrorComponent message={error} />\n        {(error === INVALID_SIGNATURE) && (\n          <button onClick={() => { verify(!ethSign) }}>\n            Try again <strong>{ethSign ? 'without' : 'with'}</strong> eth sign.\n          </button>\n        )}\n      </div>\n    )\n  }\n\n  if (!decodedCredential) {\n    return <LoadingComponent />\n  }\n\n  const payload = decodedCredential.payload\n  const data = decodedCredential.payload.vc.credentialSubject\n\n  return (\n    <div className=\"panel credential\">\n      <h3>{payload.vc.type?.join(': ')}</h3>\n      <FormatMetaData className=\"did\" label=\"Issuer\" value={payload.iss} />\n      <FormatMetaData className=\"did\" label=\"Subject\" value={payload.sub} />\n      <FormatDates payload={payload} />\n      <h4>CredentialSubject</h4>\n      {data && (\n        Object.keys(data).map((key: string) => (\n          <FormatMetaData value={data[key]} label={key} key={key} />\n        ))\n      )}\n    </div>\n  )\n}\n\nexport default CredentialDisplay\n","import { JWTVerified } from 'jesse-did-jwt'\nimport React from 'react'\nimport CredentialDisplay from './CredentialDisplay'\nimport { FormatDates, FormatMetaData } from './MetaDataHelpers'\n\ninterface PresentationDisplayInterface {\n  presentation: JWTVerified\n  verifyVerifiableJwt: (jwt: string, ethSign: boolean) => Promise<JWTVerified>\n}\n\nconst PresentationDisplay: React.FC<PresentationDisplayInterface> = ({ presentation, verifyVerifiableJwt }) => (\n  <div className=\"panel presentation\">\n    <h3>{presentation.payload.vp.type?.join(': ')}</h3>\n\n    <FormatMetaData className=\"did\" label=\"Issuer\" value={presentation.issuer} />\n    <FormatDates payload={presentation.payload} />\n\n    {presentation.payload.vp.verifiableCredential.map((jwt: string) => (\n      <CredentialDisplay jwt={jwt} key={jwt} verifyVerifiableJwt={verifyVerifiableJwt} />\n    ))}\n  </div>\n)\n\nexport default PresentationDisplay\n","import React, { useEffect, useState } from 'react'\nimport rifCredentialViewerLogo from './assets/images/rif-credential-viewer.svg'\nimport poweredByRif from './assets/images/powered-by-iov.svg'\nimport './assets/scss/_index.scss'\nimport { version } from '../package.json'\nimport { appStatus, appStateInterface, initialState } from './state'\nimport UserInput from './components/UserInput'\nimport ErrorComponent from './components/ErrorComponent'\nimport { verifyVerifiableJwt } from './operations'\nimport LoadingComponent from './components/LoadingComponent'\nimport PresentationDisplay from './components/PresentationDisplay'\nimport { INVALID_SIGNATURE } from './constants'\nimport CredentialDisplay from './components/CredentialDisplay'\nimport { JWTVerified } from 'jesse-did-jwt'\n\nfunction App () {\n  const [appState, setAppState] = useState<appStateInterface>(initialState)\n\n  const decode = (jwt: string, useEthSign: boolean) => {\n    setAppState({ ...initialState, status: appStatus.LOADING })\n\n    verifyVerifiableJwt(jwt, useEthSign)\n      .then((credential: JWTVerified) =>\n        setAppState({ ...appState, jwt, credential, status: appStatus.DECODED }))\n      .catch((err: Error) => {\n        const errorMessage = err.message === INVALID_SIGNATURE ? `${err.message}, try toggling 'Use ethSign'.` : err.message\n        setAppState({ ...initialState, message: errorMessage, status: appStatus.ERROR })\n      })\n  }\n\n  const initialJwt = window.location.search.startsWith('?jwt=') ? window.location.search.replace('?jwt=', '') : ''\n  useEffect(() => {\n    if (initialJwt !== '') {\n      decode(initialJwt, true)\n    }\n  }, [window.location.search])\n\n  return (\n    <div className=\"App\">\n      <div className=\"container header\">\n        <div className=\"column\">\n          <img src={rifCredentialViewerLogo} alt=\"RIF Credential Viewer\" />\n        </div>\n      </div>\n\n      <div className=\"container content\">\n        <div className=\"column column-6\">\n          <h2>Raw JWT</h2>\n          <UserInput\n            disabled={appState.status === appStatus.LOADING}\n            handleDecode={decode}\n            initialText={initialJwt}\n          />\n        </div>\n        <div className=\"column column-6\">\n          <h2>Decoded</h2>\n          {appState.credential && appState.credential.payload.vp &&\n            <PresentationDisplay presentation={appState.credential} verifyVerifiableJwt={verifyVerifiableJwt} />}\n          {appState.credential && appState.credential.payload.vc &&\n            <CredentialDisplay credential={appState.credential} verifyVerifiableJwt={verifyVerifiableJwt} />}\n          {appState.status === appStatus.ERROR && (\n            <div className=\"panel\">\n              <ErrorComponent message={appState.message} />\n            </div>\n          )}\n          {appState.status === appStatus.LOADING && <LoadingComponent />}\n        </div>\n      </div>\n\n      <div className=\"container footer\">\n        <div className=\"column\">\n          <img src={poweredByRif} alt=\"Powered By RIF\" />\n          <p>Copyright &copy; 2021 IOV Labs. All rights reserved.</p>\n          <p>Version {version}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}